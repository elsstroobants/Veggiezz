{"version":3,"sources":["images/heart_hollow_pink.svg","images/heart_solid_pink.svg","images/searchicon.svg","images/heart_solid_white.svg","images/cross_pink.svg","components/IngredientsList/IngredientsList.js","components/InstructionsList/InstructionsList.js","components/Recipe/Recipe.js","components/SearchBar/SearchBar.js","components/RecipeSummary/RecipeSummary.js","components/RecipeList/RecipeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IngredientsList","react_default","a","createElement","className","this","props","ingredients","React","Component","InstructionsList","instructions","href","recipeLink","target","Recipe","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","backToSearchResults","bind","assertThisInitialized","handleClick","selectRecipe","toggleHeart","recipe","instructionsListItems","map","step","i","key","url","ingredientsListItems","ingredient","heartImg","favourite","heartSolid","heartHollow","name","src","picSrc","alt","components_IngredientsList_IngredientsList","components_InstructionsList_InstructionsList","onClick","type","value","SearchBar","state","searchTerm","search","handleTermChange","handleHeartClick","componentDidMount","event","handleSearch","preventDefault","newTerm","setState","displayFavList","searchTermInput","focus","_this2","classNameSearchBar","homeScreen","classNameSearchIcon","classNameSearchButton","classNameLogo","classNameHeartSolid","onSubmit","placeholder","onChange","ref","input","searchIcon","RecipeSummary","handleRecipeSummaryClick","handleRecipeSummaryIconClick","handleIconClick","iconSrc","getIconSrc","RecipeList","recipeItems","recipes","recipeItem","components_RecipeSummary_RecipeSummary","id","listTitle","message","App","searchResults","selectedRecipe","favList","displayType","addToFavList","removeFromFavList","isFavourite","getIconSearchResultsList","getIconFavList","fetch","then","response","ok","json","Error","status","recipeJson","searchResultsFromAPI","hits","hit","uri","label","image","ingredientLines","console","log","newRecipe","recipeToAdd","push","recipeToRemove","newFavList","filter","fav","cross","components_SearchBar_SearchBar","components_Recipe_Recipe","display","iconToDisplaySrc","listMessage","length","components_RecipeList_RecipeList","handleLogin","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff8b9483.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart_hollow_pink.16e5df6f.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart_solid_pink.62861760.svg\";","module.exports = __webpack_public_path__ + \"static/media/searchicon.c07793ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart_solid_white.0e04a97c.svg\";","module.exports = __webpack_public_path__ + \"static/media/cross_pink.43f9d242.svg\";","import React from 'react';\nimport './IngredientsList.css';\n\nclass IngredientsList extends React.Component {\n  //the ingredients come from the recipe, where they were passed in as a prop. They get displayed at this level as list items in an unordered list.\n\n  render() {\n    return (\n      <div className=\"ingredients-box\">\n        <h2 className=\"title\">Ingredients</h2>\n        <ul>{this.props.ingredients}</ul>\n      </div>\n    );\n  }\n};\n\nexport default IngredientsList;\n","import React from 'react';\nimport './InstructionsList.css';\n\n//the instructions come from Recipe, where they were passed in as a prop. They get displayed at this level as list items in an ordered list.\nclass InstructionsList extends React.Component {\n  render() {\n    return (\n      <div className=\"instructions-box\">\n        <h2 className=\"title\">Instructions</h2>\n        <ol>{this.props.instructions}</ol>\n        <a href={this.props.recipeLink} target=\"_blank\">Link to recipe</a>\n      </div>\n    );\n  }\n};\n\nexport default InstructionsList;\n","import React from 'react';\nimport './Recipe.css';\nimport IngredientsList from '../IngredientsList/IngredientsList.js';\nimport InstructionsList from '../InstructionsList/InstructionsList.js';\nimport heartHollow from '../../images/heart_hollow_pink.svg';\nimport heartSolid from '../../images/heart_solid_pink.svg';\n\n//recipe has been passed to the Recipe component via the App component. It is used here by accessing certain properties of the recipe object and is referred to as this.props.recipe.\nclass Recipe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.backToSearchResults = this.backToSearchResults.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  //when the back button is clicked on the recipe, the recipelist (with the current search results) is shown and the recipe is hidden.\n  backToSearchResults() {\n    this.props.selectRecipe(null);\n  }\n\n  handleClick() {\n    this.props.toggleHeart(this.props.recipe);\n  }\n\n  render() {\n    let instructionsListItems;\n    let recipeLink;\n    if (this.props.recipe.instructions) {\n    //The instructionsListItems consists of a list of list items, where each list item contains an instruction step.\n      instructionsListItems = this.props.recipe.instructions.map((step, i) => <li key={'step_' + i}>{step}</li>);\n    } else {\n      recipeLink = this.props.recipe.url;\n    }\n\n    //This const consists of a list of list items, where each list item contains an ingredient.\n    const ingredientsListItems = this.props.recipe.ingredients.map((ingredient, i) => <li key={'ingredient_' + i}>{ingredient}</li>);\n\n    const heartImg = this.props.recipe.favourite ? heartSolid : heartHollow;\n\n    //The Recipe component renders a header with the name of the recipe, an image of the recipe, an ingredientslist and an instuctions list. The ingredientslist is passed the ingredientsListItems as a prop called ingredients and the instructionsListItems as instructions.\n    return (\n      <div className=\"recipe\">\n        <div className=\"recipe-name\">\n          <h1>{this.props.recipe.name}</h1>\n        </div>\n        <div className=\"recipe-image\">\n          <img src={this.props.recipe.picSrc} alt=\"lasagna\"/>\n        </div>\n        <div className=\"content-box\">\n          <IngredientsList ingredients={ingredientsListItems}/>\n          <InstructionsList instructions={instructionsListItems} recipeLink={recipeLink}/>\n        </div>\n        <img src={heartImg} className=\"heart\" onClick={this.handleClick} alt=''/>\n        <input className=\"backButton\" type=\"button\" value=\"<\" onClick={this.backToSearchResults}/>\n      </div>\n    );\n  }\n}\n\nexport default Recipe;\n","import React from 'react';\nimport './SearchBar.css';\nimport searchIcon from '../../images/searchicon.svg';\nimport heartSolid from '../../images/heart_solid_white.svg';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { searchTerm: this.props.searchTerm };\n    this.search= this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleHeartClick = this.handleHeartClick.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  search(event) {\n    //When the search button is clicked, the search function is called, which calls the search function in the App component via the passed in prop and passes it the updated searchTerm.\n    this.props.handleSearch(this.state.searchTerm);\n    event.preventDefault();//this stops the event propagating to the top.\n  }\n\n  handleTermChange(event) {\n    // The newTerm const captures the value that was entered in the text field.\n    // The state of searchTerm is set to the new term.\n    const newTerm = event.target.value;\n    this.setState( { searchTerm: newTerm } );\n  }\n\n  handleHeartClick() {\n    this.props.displayFavList();\n  }\n\n  componentDidMount() {\n    this.searchTermInput.focus();\n  }\n\n  //We cannot use onClick={this.props.handleSearch} directly on the input button element to do a search, because we need to capture the value of the text that was entered in the search field so we can pass it back to the App component in order to handle the search. The way to do that is:\n  // 1) when the text is changed in the searchfield, the state of searchTerm is updated. This happens because of the onChange attribute which calls the handleTermChange function.\n  // 2) when the search button is clicked, the search function is called. This funtion WILL call the function we wanted to call in the first place and which is defined in App and passed to SearcBar as a prop, and it passes it the updated searchTerm as a parameter.\n\n  render() {\n    let classNameSearchBar = this.props.homeScreen ? 'searchBarHomeScreen' : 'searchBarHeader';\n    let classNameSearchIcon = this.props.homeScreen ? 'searchIconHomeScreen' : 'searchIconHeader';\n    let classNameSearchButton = this.props.homeScreen ? 'searchButtonHomeScreen' : 'searchButtonHeader';\n    let classNameLogo = this.props.homeScreen ? 'logoHomeScreen' : 'logoHeader';\n    let classNameHeartSolid = this.props.homeScreen ? 'heartSolidHomeScreen' : 'heartSolidHeader';\n\n    return (\n      <div className={classNameSearchBar}>\n        <div className={classNameSearchBar}>\n          <form onSubmit={this.search}>\n            <input className=\"searchField\" type=\"text\" placeholder=\"Enter your favourite veg\"\n             value={this.state.searchTerm} onChange={this.handleTermChange}\n             //this next line is essential for the componentDidMount function. It is used to put the focus on the searchField straight after rendering.\n             ref={(input) => { this.searchTermInput = input; }} />\n            <input className={classNameSearchButton} type=\"submit\" value=\"find recipes\" />\n          </form>\n          <img className={classNameSearchIcon} src={searchIcon} onClick={this.search} alt=''/>\n          <img className={classNameHeartSolid} src={heartSolid} onClick={this.handleHeartClick} alt=''/>\n        </div>\n        <h1 className={classNameLogo}>Veggies</h1>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './RecipeSummary.css';\n\n\nclass RecipeSummary extends React.Component {\n  constructor(props){\n    super(props);\n    this.handleRecipeSummaryClick = this.handleRecipeSummaryClick.bind(this);\n    this.handleRecipeSummaryIconClick = this.handleRecipeSummaryIconClick.bind(this);\n  }\n\n  handleRecipeSummaryClick() {\n    this.props.selectRecipe(this.props.recipe);\n  }\n\n  handleRecipeSummaryIconClick() {\n    this.props.handleIconClick(this.props.recipe);\n  }\n\n  render() {\n\n    const iconSrc = this.props.getIconSrc(this.props.recipe);\n\n    return (\n      <div className=\"recipeSummary\">\n        <li className=\"recipeSummaryListItem\" onClick={this.handleRecipeSummaryClick}>\n          {this.props.recipe.name}\n        </li>\n        <img src={iconSrc} alt='' className=\"recipeSummaryIcon\" onClick={this.handleRecipeSummaryIconClick} />\n      </div>\n    );\n  }\n};\n\nexport default RecipeSummary;\n","import React from 'react';\nimport './RecipeList.css';\nimport RecipeSummary from '../RecipeSummary/RecipeSummary.js';\n\nclass RecipeList extends React.Component {\n\n  render() {\n    //this.props.recipes contains all the searchresults coming from the App component. const recipeItems makes a list of recipe summaries out of these search results. These recipe summaries are then put in an unordered list which is rendered.\n    // I still find this a bit mind-boggling, as I don't see why this has to be done differently to the other list set-up used to create the IngredienstsList by the Recipe component... Basically, it looks weird to render a RecipySummary inside of a const. Is there a way to write this differently?\n    let recipeItems;\n    if (this.props.recipes !== null) {\n      recipeItems = this.props.recipes.map((recipeItem, i) => <RecipeSummary key={'recipe_' + i} recipe={recipeItem} selectRecipe={this.props.selectRecipe} getIconSrc={this.props.getIconSrc} handleIconClick={this.props.handleIconClick}/>);\n    }\n\n    return (\n      <div id=\"recipeListContainer\">\n        <div className=\"recipeList\">\n          <h2 className=\"title\">{this.props.listTitle}</h2>\n          <p className=\"listMessage\">{this.props.message}</p>\n          <ul>{recipeItems}</ul>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default RecipeList;\n","import React from 'react';\nimport './App.css';\nimport Recipe from './components/Recipe/Recipe.js';\nimport SearchBar from './components/SearchBar/SearchBar.js';\nimport RecipeList from './components/RecipeList/RecipeList.js';\nimport heartHollow from './images/heart_hollow_pink.svg';\nimport heartSolid from './images/heart_solid_pink.svg';\nimport cross from './images/cross_pink.svg';\n\n// https://api.edamam.com/search?q=onion&app_id=65b44741&app_key=dd81ed343eac181f1a75a52d6aa2cdfc\n\n\n//This is the main app, which is the starting point for all information. It holds several components and children of components. The initial state has two items in it: the searchResults are set to listOfRecipes (Doug: why not null?) and the selectedRecipe is set to null, because we don't want to show a recipe until one has been selected.\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      selectedRecipe: null,\n      searchTerm: null,\n      favList: [],\n      displayType: null\n    };\n    this.search = this.search.bind(this);\n    this.selectRecipe = this.selectRecipe.bind(this);\n    this.displayFavList = this.displayFavList.bind(this);\n    this.addToFavList = this.addToFavList.bind(this);\n    this.removeFromFavList = this.removeFromFavList.bind(this);\n    this.isFavourite = this.isFavourite.bind(this);\n    this.toggleHeart = this.toggleHeart.bind(this);\n    this.getIconSearchResultsList = this.getIconSearchResultsList.bind(this);\n    this.getIconFavList = this.getIconFavList.bind(this);\n  }\n\n  // This function gets called when the user clicks the \"Search\" button.\n  // It is given the term that is to be searched for.\n  search(searchTerm) {\n    this.setState({\n      searchTerm: searchTerm,\n      searchResults: null,\n      displayType: \"search\",\n      selectedRecipe: null\n    })\n\n    // Build the URL for the search\n    let apiSearchUrl = 'https://api.edamam.com/search'\n        + '?q=' + searchTerm\n        + '&health=vegan'\n        + '&to=20'\n        + '&app_id=65b44741&app_key=dd81ed343eac181f1a75a52d6aa2cdfc';\n\n    // Call the URL to run the search\n    fetch(apiSearchUrl)\n    .then(response => {\n      // Handle the response from the search\n      if (!response.ok) {\n        throw new Error('HTTP error, status = ' + response.status);\n      } else {\n        return response.json();\n      }\n    })\n    .then(recipeJson => {\n      // Handle the JSON content from the search result\n      // Convert the response from the API to the expected internal format.\n      let searchResultsFromAPI = recipeJson.hits.map(hit => {\n        let recipe = hit.recipe;\n        return {\n          id: recipe.uri,\n          name: recipe.label,\n          picSrc: recipe.image,\n          ingredients: recipe.ingredientLines,\n          url: recipe.url,   // link to original recipe description\n          favourite: this.isFavourite(recipe.uri)\n        }\n      })\n      console.log(\"Search result = \", recipeJson, searchResultsFromAPI)\n      this.setState({searchResults: searchResultsFromAPI})\n    });\n  }\n\n  isFavourite(id) {\n    for (let i in this.state.favList) {\n      let fav = this.state.favList[i];\n      if (id === fav.id) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  //This function gets called when the user selects a recipe from the RecipeList by clicking a particular RecipeSummary. It is given the newRecipe as a parameter. Selecting a new recipe changes the state in the App component and sets selectedRecipe to the new selected recipe.\n  selectRecipe(newRecipe) {\n    this.setState( {selectedRecipe: newRecipe} );\n  }\n\n  displayFavList() {\n    this.setState( {displayType:'favourites', selectedRecipe: null} ) ;\n  }\n\n  addToFavList(recipeToAdd) {\n    this.state.favList.push(recipeToAdd);\n    recipeToAdd.favourite = true;\n    this.setState( {} );\n    //icon needs to show heartSolid instead of heartHollow\n  }\n\n  removeFromFavList(recipeToRemove) {\n    const newFavList = this.state.favList.filter(fav => fav.id !== recipeToRemove.id);\n    recipeToRemove.favourite = false;\n    this.setState( {favList: newFavList} );\n  }\n\n  //if hollowHeart: add to favouriteslist\n  //if solidHeart: remove from favouriteslist\n  toggleHeart(recipe) {\n    if (recipe.favourite) {\n      this.removeFromFavList(recipe);\n    } else {\n      this.addToFavList(recipe);\n    }\n  }\n\n  getIconSearchResultsList(recipe) {\n    if (recipe.favourite) {\n      return heartSolid;\n    } else {\n      return heartHollow;\n    }\n  }\n\n  getIconFavList(recipe) {\n    return cross;\n  }\n\n  // If there is no recipe selected, the state of selectedRecipe is null. In this case the RecipeList will be rendered, not the recipe.\n  // Searchbar is passed a prop called handleSearch. This means that \"this.props.handleSearch\" can be used as an event handler value in\n  //the SearchBar component. Have a look in the SearchBar component to see where it is used. You would expect to find this in the SearchBars <input> element as an onClick attribute (onClick={this.handleSearch}) but, that wouldn't work because you need to capture the value of the text that was entered in the search field somehow. See comments in SearchBar to see how to do that.\n  // The recipeList component is passed the search results by giving the RecipeList component an attribute called recipes. The state of the selected recipe can be changed by calling the selectRecipe function and passing it a new recipe.\n\n  render() {\n    if (this.state.selectedRecipe !== null) {\n      // render recipe\n      return (\n        <div className=\"App-content\">\n          <SearchBar handleSearch={this.search} homeScreen={false} searchTerm={this.state.searchTerm} displayFavList={this.displayFavList}/>\n          <Recipe recipe={this.state.selectedRecipe} selectRecipe={this.selectRecipe} toggleHeart={this.toggleHeart}/>\n        </div>\n      );\n    } else if (this.state.displayType !== null) {\n      let display;\n      let iconToDisplaySrc;\n      let handleIconClick;\n      let listTitle;\n      let listMessage;\n      if (this.state.displayType === 'search') {\n        display = this.state.searchResults;\n        iconToDisplaySrc = this.getIconSearchResultsList;\n        handleIconClick = this.toggleHeart;\n        listTitle = 'Search Results';\n\n        if(this.state.searchResults === null) {\n          listMessage = 'searching...';\n        } else if (this.state.searchResults.length !== 0) {\n          listMessage = '';\n        } else {\n          listMessage = 'Oops, no search results for the entered term.';\n        }\n\n        //line below to be removed once block above is working (it replaces it).\n        //listMessage = (this.state.searchResults.length !== 0) ? '' : 'Oops, no search results for the entered term.';\n\n\n      } else {\n        display = this.state.favList;\n        iconToDisplaySrc= this.getIconFavList;\n        handleIconClick = this.removeFromFavList;\n        listTitle = 'Favourites List';\n        listMessage = (this.state.favList.length !== 0) ? '' : 'No favourites have been added yet.';\n      }\n\n      // Render list (search results or fav list) depending on displayType\n      return (\n        <div className=\"App-content\">\n          <SearchBar handleSearch={this.search} homeScreen={false} searchTerm={this.state.searchTerm} displayFavList={this.displayFavList}/>\n          <RecipeList recipes={display} selectRecipe={this.selectRecipe} listTitle={listTitle} getIconSrc={iconToDisplaySrc} handleIconClick={handleIconClick} message={listMessage}/>\n        </div>\n      );\n\n    } else {\n      // Render home screen\n      return (\n        <div className=\"App-home\">\n          <h1 className=\"veggiezz\">Veggiezz</h1>\n          <SearchBar handleLogin={this.handleLogin} handleSearch={this.search} homeScreen={true}/>\n        </div>\n      );\n    }\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n    \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}